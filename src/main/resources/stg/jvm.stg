file(fileName, strings, locals, block) ::= <<
.class public <fileName>
.super java/lang/Object

.method public \<init>()V
	aload_0
	invokenonvirtual java/lang/Object/\<init>()V
	return
.end method

.method public static main([Ljava/lang/String;)V
   	.limit stack 4  
   	.limit locals <locals>
	<block>
   	return
.end method
>>

block(symbols, statements, scope) ::= <<
<statements;separator="\n">
>>

println(value, scope) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<if(value.reference)>
<if(value.number)>
dload_<value.register>
invokevirtual java/io/PrintStream/println(D)V
<elseif(value.boolean)>
iload <value.register>
invokevirtual java/io/PrintStream/println(Z)V
<else>
aload_<value.register>
invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
<endif>
<else>
<if(value.number)>
ldc2_w <value>
invokevirtual java/io/PrintStream/println(D)V
<elseif(value.boolean)>
iconst_<value>
invokevirtual java/io/PrintStream/println(Z)V
<else>
ldc "<value>"
invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
<endif>
<endif>
>>

assignment(name, value, scope) ::= <<
<if(value.reference)>
<if(value.number)>
dload_<value.register>
dstore_<scope.nextLocal>
<elseif (value.boolean)>
iload <value.register>
istore <scope.nextLocal>
<else>
aload_<value.register>
astore_<scope.nextLocal>
<endif>
<else>
<if(value.number)>
ldc2_w <value>
dstore_<scope.nextLocalWide>
<elseif(value.boolean)>
iconst_<value>
istore <scope.nextLocal>
<else>
ldc "<value>"
astore_<scope.nextLocal>
<endif>
<endif>
>>

ifStat(value, block, scope, label, sublevel) ::= <<
<if(value.reference)>
<if(value.boolean)>
iconst_1
iload <value.register>
if_icmpne false<label>_<sublevel>
<elseif(value.number)>
dload <value.register>
ldc2_w 0.0
dcmpl
ifeq false<label>_<sublevel>
<else>
aload <value.register>
ldc ""
invokevirtual java/lang/String/equals(Ljava/lang/Object;)Z
ifne false<label>_<sublevel>
<endif><else>
iconst_1
iconst_<value.toBoolean>
if_icmpne false<label>_<sublevel>
<endif>

	<block>
	goto endif<label>
false<label>_<sublevel>:

>>

elseifStat(value, block, scope, label, sublevel) ::= "<ifStat(value, block, scope, label, sublevel)>"

elseStat(block, label) ::= <<
	<block>
>>

endifStat(label) ::= <<
endif<label>:
>>