equalityExpr(lval, rval, scope, equal) ::= <<; START <if(equal)>EQ<else>NEQ<endif> expr
<if(lval.string&&rval.string)>
<load(lval)>
<load(rval)>
invokevirtual java/lang/String/compareTo(Ljava/lang/String;)I
<if(equal)><isZero(scope.nextLabel)><else><isNotZero(scope.nextLabel)><endif>
<elseif(lval.string&&rval.number)>
<compareStringToNumber(lval, rval, scope, equal)>
<elseif(lval.string&&rval.boolean)>
<compareStringBoolean(lval, rval, scope, equal)>
<elseif(lval.number&&rval.string)>
<compareStringToNumber(rval, lval, scope, equal)>
<elseif(lval.number&&rval.number)>
<load(lval)>
<load(rval)>
dcmpl
<if(equal)><isZero(scope.nextLabel)><else><isNotZero(scope.nextLabel)><endif>
<elseif(lval.number&&rval.boolean)>
<compareNumberBoolean(lval, rval, scope, equal)>
<elseif(lval.boolean&&rval.string)>
<compareStringBoolean(rval, lval, scope, equal)>
<elseif(lval.boolean&&rval.number)>
<compareNumberBoolean(rval, lval, scope, equal)>
<elseif(lval.boolean&&rval.boolean)>
<load(lval)>
<load(rval)>
<compareBooleans(scope.nextLabel, equal)>
<endif>
; END <if(equal)>EQ<else>NEQ<endif> expr
>>

bopExpression(lval, rval, scope, op) ::= <<
<if(lval.string&&rval.string)>
<load(lval)>
<load(rval)>
invokevirtual java/lang/String/compareTo(Ljava/lang/String;)I
iconst_0

<elseif(lval.string&&rval.number)>
<load(lval)>
invokestatic java/lang/Double/parseDouble(Ljava/lang/String;)D
<load(rval)>
dcmpl
iconst_0
<elseif(lval.number&&rval.string)>
<load(lval)>
<load(rval)>
invokestatic java/lang/Double/parseDouble(Ljava/lang/String;)D
dcmpl
iconst_0
<elseif(lval.number&&rval.number)>
<load(lval)>
<load(rval)>
dcmpl
iconst_0
<endif>
if_icmp<opMap.(op)> true<scope.nextLabel>
iconst_0
goto endif<scope.label>
true<scope.label>:
iconst_1
endif<scope.label>:

>>

opMap ::= [
	"<": "lt",
	"<=": "le",
	">": "gt",
	">=": "ge"
]

compareBooleans(label, equal) ::= <<
if_icmp<if(equal)>eq<else>ne<endif> true<label>
	iconst_0
	goto endif<label>
true<label>:
	iconst_1
endif<label>:
>>

compareNumberBoolean(number, boolean, scope, equal) ::= <<
<load(number)>
dconst_0
dcmpl
<load(boolean)>
<compareBooleans(scope.nextLabel, equal)>
>>

compareStringBoolean(string, boolean, scope, equal) ::= <<
<load(string)>
invokevirtual java/lang/String/length()I
<isNotZero(scope.nextLabel)>
<load(boolean)>
<compareBooleans(scope.nextLabel, equal)>
>>

compareStringToNumber(string, number, scope, equal) ::= <<
new java/text/DecimalFormat
dup
ldc "#.####"
invokespecial java/text/DecimalFormat/\<init>(Ljava/lang/String;)V
<load(number)>
invokevirtual java/text/DecimalFormat/format(D)Ljava/lang/String;
<load(string)>
invokevirtual java/lang/String/equals(Ljava/lang/Object;)Z
<if(!equal)><isZero(scope.nextLabel)><endif>
>>

isNotZero(label) ::=<<
ifne true<label>
	iconst_0
	goto endif<label>
true<label>:
	iconst_1
endif<label>:
>>

isZero(label) ::= <<
ifne false<label>
	iconst_1
	goto endif<label>
false<label>:
	iconst_0
endif<label>:
>>

ifFalseGotoLabel(value, label, pop=false) ::= <<
<if(value.string)>
invokevirtual java/lang/String/length()I
ifle false<if(pop)>Pop<endif><label><elseif(value.number)>
dconst_0
dcmpl
ifeq false<if(pop)>Pop<endif><label><else>
iconst_0
if_icmpeq false<if(pop)>Pop<endif><label><endif>
>>

ifTrueGotoLabel(value, label, pop=false) ::= <<
<if(value.string)>
invokevirtual java/lang/String/length()I
ifne true<if(pop)>Pop<endif><label> 
<elseif(value.number)>
dconst_0
dcmpl
ifne true<if(pop)>Pop<endif><label>	
<else>
iconst_0
if_icmpne true<if(pop)>Pop<endif><label>
<endif>
>>


load(value) ::= <%
<if(value.symbol)>
	<if(value.string)>aload <value.local>
	<elseif(value.number)>dload <value.local>
	<else>iload <value.local>
	<endif>
<elseif(!value.reference)>
	<if(value.string)>ldc "<value>"
	<elseif(value.number)>ldc2_w <value>
	<else>iconst_<value>
	<endif>
<endif>
%>

typeMap ::= [
	"string": "Ljava/lang/String;",
	"number": "D",
    "boolean": "Z"
]