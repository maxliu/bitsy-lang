file(fileName, strings, locals, block) ::= <<
#!/bin/bash
<block>
>>

block(symbols, statements, scope) ::= <<
<statements;separator="\n">
>>

println(value, scope) ::= <<
<if(value.reference)>
<if(value.boolean)>
if [ "$<value>" == "1" ]; then
    printf "true\n"
else
    printf "false\n"
fi
<else>
printf "$<value>\n"<endif><else>
printf "<bashValue(value)>\n"<endif>
>>

assignment(name, value, scope) ::= <<
<if(value.reference)>
<name>=${<value>}
<else>
<if(value.string)>
<name>="<value>"<else>
<name>=<value>
<endif>
<endif>
>>

ifStat(value, block, scope, label, sublevel) ::= <<
<if(value.reference)>
<if(value.number)>
if [[ $(echo "$<value> != 0.0"|bc) -eq 1 ]]; then
<elseif(value.boolean)>
if [[ $<value> -ne 0 ]]; then
<else>
if [[ "$<value>" != "" ]]; then
<endif><else>
if [[ "<value.toBoolean>" != "0" ]]; then
<endif>
	<block>

>>

elseifStat(value, block, scope, label, sublevel) ::= <<
<if(value.reference)>
<if(value.number)>
elif [[ $(echo "$<value> != 0.0"|bc) -eq 1 ]]; then
<elseif(value.boolean)>
elif [[ $<value> -ne 0 ]]; then
<else>
elif [[ "$<value>" != "" ]]; then
<endif><else>
elif [[ "<value.toBoolean>" != "0" ]]; then
<endif>
	<block>

>>

elseStat(block, label) ::= <<
else
	<block>

>>

endifStat(label) ::= <<
fi
>>

bashValue(s) ::= <<
<if(s.boolean)><if(s.onTrue)>true<else>false<endif><else><s><endif>
>> 