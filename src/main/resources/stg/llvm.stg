file(fileName, strings, block) ::= <<
@.newline = internal constant [2 x i8] c"\0A\00"
@.double = internal constant [3 x i8] c"%f\00"
@.true = internal constant [5 x i8] c"true\00"
@.false = internal constant [6 x i8] c"false\00"
<strings:{s | @.str<i> = internal constant <llvmConstant(s)>}; separator="\n">

declare i32 @printf(i8 *, ...)

define i32 @main() {
    <block>
}
>>

block(symbols, statements) ::= <<
<symbols:{ s | %<s.name> = alloca <symbolType(s.type)>}; separator="\n">
<statements;separator="\n">
ret i32 0;
>>

println(s, reg) ::= <<
<if(s&&s.reference)>
<if(s.string)>
%r<reg> = load i8** %<s> 
call i32 (i8 *, ...)* @printf(i8* %r<reg>)
<elseif(s.number)>
%r<reg> = load double* %<s> 
call i32 (i8 *, ...)* @printf(i8* getelementptr ([3 x i8]* @.double, i32 0, i32 0), double %r<reg>)
<elseif(s.boolean)>
%r<reg> = load i32* %<s>
%c<reg> = icmp ne i32 %r<reg>, 0
br i1 %c<reg>, label %true<reg>, label %false<reg>
true<reg>: 
	call i32 (i8 *, ...)* @printf(i8* getelementptr ([5 x i8]* @.true, i32 0, i32 0))
	br label %endif<reg>
false<reg>:
	call i32 (i8 *, ...)* @printf(i8* getelementptr ([6 x i8]* @.false, i32 0, i32 0))
	br label %endif<reg>
endif<reg>:
<endif>
<elseif(s)>call i32 (i8 *, ...)* @printf(i8* <getString(s)>)
<endif>call i32 (i8 *, ...)* @printf(i8* getelementptr ([2 x i8]* @.newline, i32 0, i32 0))
>>

assignment(name, value, reg) ::= <<
<if(value.reference)>
%r<reg> = load <llvmType(value)>* %<value>
store <llvmType(value)> %r<reg>, <llvmType(value)>* %<name><else>
store <llvmType(value)> <llvmValue(value)>, <llvmType(value)>* %<name><endif>
>>

typeMap ::= [
	"string": "i8*",
	"number": "double",
	"boolean": "i32"
]

symbolType(type) ::= "<typeMap.(type.name)>"
llvmConstant(s) ::= <<[<(s.LLVMLength)> x i8] c"<s.LLVMString>">>
llvmType(v) ::= "<if(v.number)>double<elseif(v.boolean)>i32<else>i8*<endif>"
llvmValue(v) ::= "<if(v.reference)>%<v><elseif(v.string)><getString(v)><else><v><endif>"
getString(s) ::= "getelementptr ([<s.LLVMLength> x i8]* @.str<s.symbol>, i32 0, i32 0)"